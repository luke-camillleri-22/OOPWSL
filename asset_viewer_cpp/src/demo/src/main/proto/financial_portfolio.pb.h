// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: demo/src/main/proto/financial_portfolio.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_demo_2fsrc_2fmain_2fproto_2ffinancial_5fportfolio_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_demo_2fsrc_2fmain_2fproto_2ffinancial_5fportfolio_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_demo_2fsrc_2fmain_2fproto_2ffinancial_5fportfolio_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_demo_2fsrc_2fmain_2fproto_2ffinancial_5fportfolio_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_demo_2fsrc_2fmain_2fproto_2ffinancial_5fportfolio_2eproto;
namespace com {
namespace example {
class Asset_Proto;
class Asset_ProtoDefaultTypeInternal;
extern Asset_ProtoDefaultTypeInternal _Asset_Proto_default_instance_;
class Bank_Proto;
class Bank_ProtoDefaultTypeInternal;
extern Bank_ProtoDefaultTypeInternal _Bank_Proto_default_instance_;
class BaseAsset_Proto;
class BaseAsset_ProtoDefaultTypeInternal;
extern BaseAsset_ProtoDefaultTypeInternal _BaseAsset_Proto_default_instance_;
class Bond_Proto;
class Bond_ProtoDefaultTypeInternal;
extern Bond_ProtoDefaultTypeInternal _Bond_Proto_default_instance_;
class Broker_Proto;
class Broker_ProtoDefaultTypeInternal;
extern Broker_ProtoDefaultTypeInternal _Broker_Proto_default_instance_;
class Intermediary_Proto;
class Intermediary_ProtoDefaultTypeInternal;
extern Intermediary_ProtoDefaultTypeInternal _Intermediary_Proto_default_instance_;
class MutualFundManager_Proto;
class MutualFundManager_ProtoDefaultTypeInternal;
extern MutualFundManager_ProtoDefaultTypeInternal _MutualFundManager_Proto_default_instance_;
class MutualFund_Proto;
class MutualFund_ProtoDefaultTypeInternal;
extern MutualFund_ProtoDefaultTypeInternal _MutualFund_Proto_default_instance_;
class Portfolio_Proto;
class Portfolio_ProtoDefaultTypeInternal;
extern Portfolio_ProtoDefaultTypeInternal _Portfolio_Proto_default_instance_;
class Snapshot_Proto;
class Snapshot_ProtoDefaultTypeInternal;
extern Snapshot_ProtoDefaultTypeInternal _Snapshot_Proto_default_instance_;
class Stock_Proto;
class Stock_ProtoDefaultTypeInternal;
extern Stock_ProtoDefaultTypeInternal _Stock_Proto_default_instance_;
}  // namespace example
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::example::Asset_Proto* Arena::CreateMaybeMessage<::com::example::Asset_Proto>(Arena*);
template<> ::com::example::Bank_Proto* Arena::CreateMaybeMessage<::com::example::Bank_Proto>(Arena*);
template<> ::com::example::BaseAsset_Proto* Arena::CreateMaybeMessage<::com::example::BaseAsset_Proto>(Arena*);
template<> ::com::example::Bond_Proto* Arena::CreateMaybeMessage<::com::example::Bond_Proto>(Arena*);
template<> ::com::example::Broker_Proto* Arena::CreateMaybeMessage<::com::example::Broker_Proto>(Arena*);
template<> ::com::example::Intermediary_Proto* Arena::CreateMaybeMessage<::com::example::Intermediary_Proto>(Arena*);
template<> ::com::example::MutualFundManager_Proto* Arena::CreateMaybeMessage<::com::example::MutualFundManager_Proto>(Arena*);
template<> ::com::example::MutualFund_Proto* Arena::CreateMaybeMessage<::com::example::MutualFund_Proto>(Arena*);
template<> ::com::example::Portfolio_Proto* Arena::CreateMaybeMessage<::com::example::Portfolio_Proto>(Arena*);
template<> ::com::example::Snapshot_Proto* Arena::CreateMaybeMessage<::com::example::Snapshot_Proto>(Arena*);
template<> ::com::example::Stock_Proto* Arena::CreateMaybeMessage<::com::example::Stock_Proto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace example {

// ===================================================================

class Asset_Proto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.example.Asset_Proto) */ {
 public:
  inline Asset_Proto() : Asset_Proto(nullptr) {};
  virtual ~Asset_Proto();

  Asset_Proto(const Asset_Proto& from);
  Asset_Proto(Asset_Proto&& from) noexcept
    : Asset_Proto() {
    *this = ::std::move(from);
  }

  inline Asset_Proto& operator=(const Asset_Proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline Asset_Proto& operator=(Asset_Proto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Asset_Proto& default_instance();

  enum AssetCase {
    kStock = 2,
    kBond = 3,
    kMutualFund = 4,
    ASSET_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Asset_Proto* internal_default_instance() {
    return reinterpret_cast<const Asset_Proto*>(
               &_Asset_Proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Asset_Proto& a, Asset_Proto& b) {
    a.Swap(&b);
  }
  inline void Swap(Asset_Proto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Asset_Proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Asset_Proto* New() const final {
    return CreateMaybeMessage<Asset_Proto>(nullptr);
  }

  Asset_Proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Asset_Proto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Asset_Proto& from);
  void MergeFrom(const Asset_Proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Asset_Proto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.example.Asset_Proto";
  }
  protected:
  explicit Asset_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_demo_2fsrc_2fmain_2fproto_2ffinancial_5fportfolio_2eproto);
    return ::descriptor_table_demo_2fsrc_2fmain_2fproto_2ffinancial_5fportfolio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kStockFieldNumber = 2,
    kBondFieldNumber = 3,
    kMutualFundFieldNumber = 4,
  };
  // string type = 1;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_type(
      std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // .com.example.Stock_Proto stock = 2;
  bool has_stock() const;
  private:
  bool _internal_has_stock() const;
  public:
  void clear_stock();
  const ::com::example::Stock_Proto& stock() const;
  ::com::example::Stock_Proto* release_stock();
  ::com::example::Stock_Proto* mutable_stock();
  void set_allocated_stock(::com::example::Stock_Proto* stock);
  private:
  const ::com::example::Stock_Proto& _internal_stock() const;
  ::com::example::Stock_Proto* _internal_mutable_stock();
  public:
  void unsafe_arena_set_allocated_stock(
      ::com::example::Stock_Proto* stock);
  ::com::example::Stock_Proto* unsafe_arena_release_stock();

  // .com.example.Bond_Proto bond = 3;
  bool has_bond() const;
  private:
  bool _internal_has_bond() const;
  public:
  void clear_bond();
  const ::com::example::Bond_Proto& bond() const;
  ::com::example::Bond_Proto* release_bond();
  ::com::example::Bond_Proto* mutable_bond();
  void set_allocated_bond(::com::example::Bond_Proto* bond);
  private:
  const ::com::example::Bond_Proto& _internal_bond() const;
  ::com::example::Bond_Proto* _internal_mutable_bond();
  public:
  void unsafe_arena_set_allocated_bond(
      ::com::example::Bond_Proto* bond);
  ::com::example::Bond_Proto* unsafe_arena_release_bond();

  // .com.example.MutualFund_Proto mutualFund = 4;
  bool has_mutualfund() const;
  private:
  bool _internal_has_mutualfund() const;
  public:
  void clear_mutualfund();
  const ::com::example::MutualFund_Proto& mutualfund() const;
  ::com::example::MutualFund_Proto* release_mutualfund();
  ::com::example::MutualFund_Proto* mutable_mutualfund();
  void set_allocated_mutualfund(::com::example::MutualFund_Proto* mutualfund);
  private:
  const ::com::example::MutualFund_Proto& _internal_mutualfund() const;
  ::com::example::MutualFund_Proto* _internal_mutable_mutualfund();
  public:
  void unsafe_arena_set_allocated_mutualfund(
      ::com::example::MutualFund_Proto* mutualfund);
  ::com::example::MutualFund_Proto* unsafe_arena_release_mutualfund();

  void clear_asset();
  AssetCase asset_case() const;
  // @@protoc_insertion_point(class_scope:com.example.Asset_Proto)
 private:
  class _Internal;
  void set_has_stock();
  void set_has_bond();
  void set_has_mutualfund();

  inline bool has_asset() const;
  inline void clear_has_asset();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  union AssetUnion {
    AssetUnion() {}
    ::com::example::Stock_Proto* stock_;
    ::com::example::Bond_Proto* bond_;
    ::com::example::MutualFund_Proto* mutualfund_;
  } asset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_demo_2fsrc_2fmain_2fproto_2ffinancial_5fportfolio_2eproto;
};
// -------------------------------------------------------------------

class BaseAsset_Proto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.example.BaseAsset_Proto) */ {
 public:
  inline BaseAsset_Proto() : BaseAsset_Proto(nullptr) {};
  virtual ~BaseAsset_Proto();

  BaseAsset_Proto(const BaseAsset_Proto& from);
  BaseAsset_Proto(BaseAsset_Proto&& from) noexcept
    : BaseAsset_Proto() {
    *this = ::std::move(from);
  }

  inline BaseAsset_Proto& operator=(const BaseAsset_Proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline BaseAsset_Proto& operator=(BaseAsset_Proto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BaseAsset_Proto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BaseAsset_Proto* internal_default_instance() {
    return reinterpret_cast<const BaseAsset_Proto*>(
               &_BaseAsset_Proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BaseAsset_Proto& a, BaseAsset_Proto& b) {
    a.Swap(&b);
  }
  inline void Swap(BaseAsset_Proto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BaseAsset_Proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BaseAsset_Proto* New() const final {
    return CreateMaybeMessage<BaseAsset_Proto>(nullptr);
  }

  BaseAsset_Proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BaseAsset_Proto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BaseAsset_Proto& from);
  void MergeFrom(const BaseAsset_Proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BaseAsset_Proto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.example.BaseAsset_Proto";
  }
  protected:
  explicit BaseAsset_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_demo_2fsrc_2fmain_2fproto_2ffinancial_5fportfolio_2eproto);
    return ::descriptor_table_demo_2fsrc_2fmain_2fproto_2ffinancial_5fportfolio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // float value = 2;
  void clear_value();
  float value() const;
  void set_value(float value);
  private:
  float _internal_value() const;
  void _internal_set_value(float value);
  public:

  // @@protoc_insertion_point(class_scope:com.example.BaseAsset_Proto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  float value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_demo_2fsrc_2fmain_2fproto_2ffinancial_5fportfolio_2eproto;
};
// -------------------------------------------------------------------

class Stock_Proto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.example.Stock_Proto) */ {
 public:
  inline Stock_Proto() : Stock_Proto(nullptr) {};
  virtual ~Stock_Proto();

  Stock_Proto(const Stock_Proto& from);
  Stock_Proto(Stock_Proto&& from) noexcept
    : Stock_Proto() {
    *this = ::std::move(from);
  }

  inline Stock_Proto& operator=(const Stock_Proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline Stock_Proto& operator=(Stock_Proto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Stock_Proto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Stock_Proto* internal_default_instance() {
    return reinterpret_cast<const Stock_Proto*>(
               &_Stock_Proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Stock_Proto& a, Stock_Proto& b) {
    a.Swap(&b);
  }
  inline void Swap(Stock_Proto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Stock_Proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Stock_Proto* New() const final {
    return CreateMaybeMessage<Stock_Proto>(nullptr);
  }

  Stock_Proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Stock_Proto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Stock_Proto& from);
  void MergeFrom(const Stock_Proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Stock_Proto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.example.Stock_Proto";
  }
  protected:
  explicit Stock_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_demo_2fsrc_2fmain_2fproto_2ffinancial_5fportfolio_2eproto);
    return ::descriptor_table_demo_2fsrc_2fmain_2fproto_2ffinancial_5fportfolio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTickerFieldNumber = 2,
    kBaseAssetFieldNumber = 1,
    kSharesFieldNumber = 3,
    kDividendYieldFieldNumber = 4,
  };
  // string ticker = 2;
  void clear_ticker();
  const std::string& ticker() const;
  void set_ticker(const std::string& value);
  void set_ticker(std::string&& value);
  void set_ticker(const char* value);
  void set_ticker(const char* value, size_t size);
  std::string* mutable_ticker();
  std::string* release_ticker();
  void set_allocated_ticker(std::string* ticker);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ticker();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ticker(
      std::string* ticker);
  private:
  const std::string& _internal_ticker() const;
  void _internal_set_ticker(const std::string& value);
  std::string* _internal_mutable_ticker();
  public:

  // .com.example.BaseAsset_Proto baseAsset = 1;
  bool has_baseasset() const;
  private:
  bool _internal_has_baseasset() const;
  public:
  void clear_baseasset();
  const ::com::example::BaseAsset_Proto& baseasset() const;
  ::com::example::BaseAsset_Proto* release_baseasset();
  ::com::example::BaseAsset_Proto* mutable_baseasset();
  void set_allocated_baseasset(::com::example::BaseAsset_Proto* baseasset);
  private:
  const ::com::example::BaseAsset_Proto& _internal_baseasset() const;
  ::com::example::BaseAsset_Proto* _internal_mutable_baseasset();
  public:
  void unsafe_arena_set_allocated_baseasset(
      ::com::example::BaseAsset_Proto* baseasset);
  ::com::example::BaseAsset_Proto* unsafe_arena_release_baseasset();

  // int32 shares = 3;
  void clear_shares();
  ::PROTOBUF_NAMESPACE_ID::int32 shares() const;
  void set_shares(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_shares() const;
  void _internal_set_shares(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float dividendYield = 4;
  void clear_dividendyield();
  float dividendyield() const;
  void set_dividendyield(float value);
  private:
  float _internal_dividendyield() const;
  void _internal_set_dividendyield(float value);
  public:

  // @@protoc_insertion_point(class_scope:com.example.Stock_Proto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ticker_;
  ::com::example::BaseAsset_Proto* baseasset_;
  ::PROTOBUF_NAMESPACE_ID::int32 shares_;
  float dividendyield_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_demo_2fsrc_2fmain_2fproto_2ffinancial_5fportfolio_2eproto;
};
// -------------------------------------------------------------------

class Bond_Proto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.example.Bond_Proto) */ {
 public:
  inline Bond_Proto() : Bond_Proto(nullptr) {};
  virtual ~Bond_Proto();

  Bond_Proto(const Bond_Proto& from);
  Bond_Proto(Bond_Proto&& from) noexcept
    : Bond_Proto() {
    *this = ::std::move(from);
  }

  inline Bond_Proto& operator=(const Bond_Proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bond_Proto& operator=(Bond_Proto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Bond_Proto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Bond_Proto* internal_default_instance() {
    return reinterpret_cast<const Bond_Proto*>(
               &_Bond_Proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Bond_Proto& a, Bond_Proto& b) {
    a.Swap(&b);
  }
  inline void Swap(Bond_Proto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bond_Proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Bond_Proto* New() const final {
    return CreateMaybeMessage<Bond_Proto>(nullptr);
  }

  Bond_Proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Bond_Proto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Bond_Proto& from);
  void MergeFrom(const Bond_Proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bond_Proto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.example.Bond_Proto";
  }
  protected:
  explicit Bond_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_demo_2fsrc_2fmain_2fproto_2ffinancial_5fportfolio_2eproto);
    return ::descriptor_table_demo_2fsrc_2fmain_2fproto_2ffinancial_5fportfolio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaturityDateFieldNumber = 3,
    kBaseAssetFieldNumber = 1,
    kInterestRateFieldNumber = 2,
  };
  // string maturityDate = 3;
  void clear_maturitydate();
  const std::string& maturitydate() const;
  void set_maturitydate(const std::string& value);
  void set_maturitydate(std::string&& value);
  void set_maturitydate(const char* value);
  void set_maturitydate(const char* value, size_t size);
  std::string* mutable_maturitydate();
  std::string* release_maturitydate();
  void set_allocated_maturitydate(std::string* maturitydate);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_maturitydate();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_maturitydate(
      std::string* maturitydate);
  private:
  const std::string& _internal_maturitydate() const;
  void _internal_set_maturitydate(const std::string& value);
  std::string* _internal_mutable_maturitydate();
  public:

  // .com.example.BaseAsset_Proto baseAsset = 1;
  bool has_baseasset() const;
  private:
  bool _internal_has_baseasset() const;
  public:
  void clear_baseasset();
  const ::com::example::BaseAsset_Proto& baseasset() const;
  ::com::example::BaseAsset_Proto* release_baseasset();
  ::com::example::BaseAsset_Proto* mutable_baseasset();
  void set_allocated_baseasset(::com::example::BaseAsset_Proto* baseasset);
  private:
  const ::com::example::BaseAsset_Proto& _internal_baseasset() const;
  ::com::example::BaseAsset_Proto* _internal_mutable_baseasset();
  public:
  void unsafe_arena_set_allocated_baseasset(
      ::com::example::BaseAsset_Proto* baseasset);
  ::com::example::BaseAsset_Proto* unsafe_arena_release_baseasset();

  // float interestRate = 2;
  void clear_interestrate();
  float interestrate() const;
  void set_interestrate(float value);
  private:
  float _internal_interestrate() const;
  void _internal_set_interestrate(float value);
  public:

  // @@protoc_insertion_point(class_scope:com.example.Bond_Proto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr maturitydate_;
  ::com::example::BaseAsset_Proto* baseasset_;
  float interestrate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_demo_2fsrc_2fmain_2fproto_2ffinancial_5fportfolio_2eproto;
};
// -------------------------------------------------------------------

class MutualFund_Proto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.example.MutualFund_Proto) */ {
 public:
  inline MutualFund_Proto() : MutualFund_Proto(nullptr) {};
  virtual ~MutualFund_Proto();

  MutualFund_Proto(const MutualFund_Proto& from);
  MutualFund_Proto(MutualFund_Proto&& from) noexcept
    : MutualFund_Proto() {
    *this = ::std::move(from);
  }

  inline MutualFund_Proto& operator=(const MutualFund_Proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline MutualFund_Proto& operator=(MutualFund_Proto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MutualFund_Proto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MutualFund_Proto* internal_default_instance() {
    return reinterpret_cast<const MutualFund_Proto*>(
               &_MutualFund_Proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MutualFund_Proto& a, MutualFund_Proto& b) {
    a.Swap(&b);
  }
  inline void Swap(MutualFund_Proto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MutualFund_Proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MutualFund_Proto* New() const final {
    return CreateMaybeMessage<MutualFund_Proto>(nullptr);
  }

  MutualFund_Proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MutualFund_Proto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MutualFund_Proto& from);
  void MergeFrom(const MutualFund_Proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MutualFund_Proto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.example.MutualFund_Proto";
  }
  protected:
  explicit MutualFund_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_demo_2fsrc_2fmain_2fproto_2ffinancial_5fportfolio_2eproto);
    return ::descriptor_table_demo_2fsrc_2fmain_2fproto_2ffinancial_5fportfolio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseAssetFieldNumber = 1,
    kExpenseRatioFieldNumber = 2,
  };
  // .com.example.BaseAsset_Proto baseAsset = 1;
  bool has_baseasset() const;
  private:
  bool _internal_has_baseasset() const;
  public:
  void clear_baseasset();
  const ::com::example::BaseAsset_Proto& baseasset() const;
  ::com::example::BaseAsset_Proto* release_baseasset();
  ::com::example::BaseAsset_Proto* mutable_baseasset();
  void set_allocated_baseasset(::com::example::BaseAsset_Proto* baseasset);
  private:
  const ::com::example::BaseAsset_Proto& _internal_baseasset() const;
  ::com::example::BaseAsset_Proto* _internal_mutable_baseasset();
  public:
  void unsafe_arena_set_allocated_baseasset(
      ::com::example::BaseAsset_Proto* baseasset);
  ::com::example::BaseAsset_Proto* unsafe_arena_release_baseasset();

  // float expenseRatio = 2;
  void clear_expenseratio();
  float expenseratio() const;
  void set_expenseratio(float value);
  private:
  float _internal_expenseratio() const;
  void _internal_set_expenseratio(float value);
  public:

  // @@protoc_insertion_point(class_scope:com.example.MutualFund_Proto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::example::BaseAsset_Proto* baseasset_;
  float expenseratio_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_demo_2fsrc_2fmain_2fproto_2ffinancial_5fportfolio_2eproto;
};
// -------------------------------------------------------------------

class Intermediary_Proto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.example.Intermediary_Proto) */ {
 public:
  inline Intermediary_Proto() : Intermediary_Proto(nullptr) {};
  virtual ~Intermediary_Proto();

  Intermediary_Proto(const Intermediary_Proto& from);
  Intermediary_Proto(Intermediary_Proto&& from) noexcept
    : Intermediary_Proto() {
    *this = ::std::move(from);
  }

  inline Intermediary_Proto& operator=(const Intermediary_Proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline Intermediary_Proto& operator=(Intermediary_Proto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Intermediary_Proto& default_instance();

  enum IntermediaryCase {
    kBroker = 3,
    kBank = 4,
    kMutualFundManager = 5,
    INTERMEDIARY_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Intermediary_Proto* internal_default_instance() {
    return reinterpret_cast<const Intermediary_Proto*>(
               &_Intermediary_Proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Intermediary_Proto& a, Intermediary_Proto& b) {
    a.Swap(&b);
  }
  inline void Swap(Intermediary_Proto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Intermediary_Proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Intermediary_Proto* New() const final {
    return CreateMaybeMessage<Intermediary_Proto>(nullptr);
  }

  Intermediary_Proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Intermediary_Proto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Intermediary_Proto& from);
  void MergeFrom(const Intermediary_Proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Intermediary_Proto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.example.Intermediary_Proto";
  }
  protected:
  explicit Intermediary_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_demo_2fsrc_2fmain_2fproto_2ffinancial_5fportfolio_2eproto);
    return ::descriptor_table_demo_2fsrc_2fmain_2fproto_2ffinancial_5fportfolio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kNameFieldNumber = 2,
    kBrokerFieldNumber = 3,
    kBankFieldNumber = 4,
    kMutualFundManagerFieldNumber = 5,
  };
  // string type = 1;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_type(
      std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .com.example.Broker_Proto broker = 3;
  bool has_broker() const;
  private:
  bool _internal_has_broker() const;
  public:
  void clear_broker();
  const ::com::example::Broker_Proto& broker() const;
  ::com::example::Broker_Proto* release_broker();
  ::com::example::Broker_Proto* mutable_broker();
  void set_allocated_broker(::com::example::Broker_Proto* broker);
  private:
  const ::com::example::Broker_Proto& _internal_broker() const;
  ::com::example::Broker_Proto* _internal_mutable_broker();
  public:
  void unsafe_arena_set_allocated_broker(
      ::com::example::Broker_Proto* broker);
  ::com::example::Broker_Proto* unsafe_arena_release_broker();

  // .com.example.Bank_Proto bank = 4;
  bool has_bank() const;
  private:
  bool _internal_has_bank() const;
  public:
  void clear_bank();
  const ::com::example::Bank_Proto& bank() const;
  ::com::example::Bank_Proto* release_bank();
  ::com::example::Bank_Proto* mutable_bank();
  void set_allocated_bank(::com::example::Bank_Proto* bank);
  private:
  const ::com::example::Bank_Proto& _internal_bank() const;
  ::com::example::Bank_Proto* _internal_mutable_bank();
  public:
  void unsafe_arena_set_allocated_bank(
      ::com::example::Bank_Proto* bank);
  ::com::example::Bank_Proto* unsafe_arena_release_bank();

  // .com.example.MutualFundManager_Proto mutualFundManager = 5;
  bool has_mutualfundmanager() const;
  private:
  bool _internal_has_mutualfundmanager() const;
  public:
  void clear_mutualfundmanager();
  const ::com::example::MutualFundManager_Proto& mutualfundmanager() const;
  ::com::example::MutualFundManager_Proto* release_mutualfundmanager();
  ::com::example::MutualFundManager_Proto* mutable_mutualfundmanager();
  void set_allocated_mutualfundmanager(::com::example::MutualFundManager_Proto* mutualfundmanager);
  private:
  const ::com::example::MutualFundManager_Proto& _internal_mutualfundmanager() const;
  ::com::example::MutualFundManager_Proto* _internal_mutable_mutualfundmanager();
  public:
  void unsafe_arena_set_allocated_mutualfundmanager(
      ::com::example::MutualFundManager_Proto* mutualfundmanager);
  ::com::example::MutualFundManager_Proto* unsafe_arena_release_mutualfundmanager();

  void clear_intermediary();
  IntermediaryCase intermediary_case() const;
  // @@protoc_insertion_point(class_scope:com.example.Intermediary_Proto)
 private:
  class _Internal;
  void set_has_broker();
  void set_has_bank();
  void set_has_mutualfundmanager();

  inline bool has_intermediary() const;
  inline void clear_has_intermediary();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  union IntermediaryUnion {
    IntermediaryUnion() {}
    ::com::example::Broker_Proto* broker_;
    ::com::example::Bank_Proto* bank_;
    ::com::example::MutualFundManager_Proto* mutualfundmanager_;
  } intermediary_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_demo_2fsrc_2fmain_2fproto_2ffinancial_5fportfolio_2eproto;
};
// -------------------------------------------------------------------

class Broker_Proto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.example.Broker_Proto) */ {
 public:
  inline Broker_Proto() : Broker_Proto(nullptr) {};
  virtual ~Broker_Proto();

  Broker_Proto(const Broker_Proto& from);
  Broker_Proto(Broker_Proto&& from) noexcept
    : Broker_Proto() {
    *this = ::std::move(from);
  }

  inline Broker_Proto& operator=(const Broker_Proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline Broker_Proto& operator=(Broker_Proto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Broker_Proto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Broker_Proto* internal_default_instance() {
    return reinterpret_cast<const Broker_Proto*>(
               &_Broker_Proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Broker_Proto& a, Broker_Proto& b) {
    a.Swap(&b);
  }
  inline void Swap(Broker_Proto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Broker_Proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Broker_Proto* New() const final {
    return CreateMaybeMessage<Broker_Proto>(nullptr);
  }

  Broker_Proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Broker_Proto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Broker_Proto& from);
  void MergeFrom(const Broker_Proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Broker_Proto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.example.Broker_Proto";
  }
  protected:
  explicit Broker_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_demo_2fsrc_2fmain_2fproto_2ffinancial_5fportfolio_2eproto);
    return ::descriptor_table_demo_2fsrc_2fmain_2fproto_2ffinancial_5fportfolio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIntermediaryFieldNumber = 1,
  };
  // .com.example.Intermediary_Proto intermediary = 1;
  bool has_intermediary() const;
  private:
  bool _internal_has_intermediary() const;
  public:
  void clear_intermediary();
  const ::com::example::Intermediary_Proto& intermediary() const;
  ::com::example::Intermediary_Proto* release_intermediary();
  ::com::example::Intermediary_Proto* mutable_intermediary();
  void set_allocated_intermediary(::com::example::Intermediary_Proto* intermediary);
  private:
  const ::com::example::Intermediary_Proto& _internal_intermediary() const;
  ::com::example::Intermediary_Proto* _internal_mutable_intermediary();
  public:
  void unsafe_arena_set_allocated_intermediary(
      ::com::example::Intermediary_Proto* intermediary);
  ::com::example::Intermediary_Proto* unsafe_arena_release_intermediary();

  // @@protoc_insertion_point(class_scope:com.example.Broker_Proto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::example::Intermediary_Proto* intermediary_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_demo_2fsrc_2fmain_2fproto_2ffinancial_5fportfolio_2eproto;
};
// -------------------------------------------------------------------

class Bank_Proto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.example.Bank_Proto) */ {
 public:
  inline Bank_Proto() : Bank_Proto(nullptr) {};
  virtual ~Bank_Proto();

  Bank_Proto(const Bank_Proto& from);
  Bank_Proto(Bank_Proto&& from) noexcept
    : Bank_Proto() {
    *this = ::std::move(from);
  }

  inline Bank_Proto& operator=(const Bank_Proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bank_Proto& operator=(Bank_Proto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Bank_Proto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Bank_Proto* internal_default_instance() {
    return reinterpret_cast<const Bank_Proto*>(
               &_Bank_Proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Bank_Proto& a, Bank_Proto& b) {
    a.Swap(&b);
  }
  inline void Swap(Bank_Proto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bank_Proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Bank_Proto* New() const final {
    return CreateMaybeMessage<Bank_Proto>(nullptr);
  }

  Bank_Proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Bank_Proto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Bank_Proto& from);
  void MergeFrom(const Bank_Proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bank_Proto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.example.Bank_Proto";
  }
  protected:
  explicit Bank_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_demo_2fsrc_2fmain_2fproto_2ffinancial_5fportfolio_2eproto);
    return ::descriptor_table_demo_2fsrc_2fmain_2fproto_2ffinancial_5fportfolio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIntermediaryFieldNumber = 1,
  };
  // .com.example.Intermediary_Proto intermediary = 1;
  bool has_intermediary() const;
  private:
  bool _internal_has_intermediary() const;
  public:
  void clear_intermediary();
  const ::com::example::Intermediary_Proto& intermediary() const;
  ::com::example::Intermediary_Proto* release_intermediary();
  ::com::example::Intermediary_Proto* mutable_intermediary();
  void set_allocated_intermediary(::com::example::Intermediary_Proto* intermediary);
  private:
  const ::com::example::Intermediary_Proto& _internal_intermediary() const;
  ::com::example::Intermediary_Proto* _internal_mutable_intermediary();
  public:
  void unsafe_arena_set_allocated_intermediary(
      ::com::example::Intermediary_Proto* intermediary);
  ::com::example::Intermediary_Proto* unsafe_arena_release_intermediary();

  // @@protoc_insertion_point(class_scope:com.example.Bank_Proto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::example::Intermediary_Proto* intermediary_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_demo_2fsrc_2fmain_2fproto_2ffinancial_5fportfolio_2eproto;
};
// -------------------------------------------------------------------

class MutualFundManager_Proto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.example.MutualFundManager_Proto) */ {
 public:
  inline MutualFundManager_Proto() : MutualFundManager_Proto(nullptr) {};
  virtual ~MutualFundManager_Proto();

  MutualFundManager_Proto(const MutualFundManager_Proto& from);
  MutualFundManager_Proto(MutualFundManager_Proto&& from) noexcept
    : MutualFundManager_Proto() {
    *this = ::std::move(from);
  }

  inline MutualFundManager_Proto& operator=(const MutualFundManager_Proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline MutualFundManager_Proto& operator=(MutualFundManager_Proto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MutualFundManager_Proto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MutualFundManager_Proto* internal_default_instance() {
    return reinterpret_cast<const MutualFundManager_Proto*>(
               &_MutualFundManager_Proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(MutualFundManager_Proto& a, MutualFundManager_Proto& b) {
    a.Swap(&b);
  }
  inline void Swap(MutualFundManager_Proto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MutualFundManager_Proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MutualFundManager_Proto* New() const final {
    return CreateMaybeMessage<MutualFundManager_Proto>(nullptr);
  }

  MutualFundManager_Proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MutualFundManager_Proto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MutualFundManager_Proto& from);
  void MergeFrom(const MutualFundManager_Proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MutualFundManager_Proto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.example.MutualFundManager_Proto";
  }
  protected:
  explicit MutualFundManager_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_demo_2fsrc_2fmain_2fproto_2ffinancial_5fportfolio_2eproto);
    return ::descriptor_table_demo_2fsrc_2fmain_2fproto_2ffinancial_5fportfolio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIntermediaryFieldNumber = 1,
  };
  // .com.example.Intermediary_Proto intermediary = 1;
  bool has_intermediary() const;
  private:
  bool _internal_has_intermediary() const;
  public:
  void clear_intermediary();
  const ::com::example::Intermediary_Proto& intermediary() const;
  ::com::example::Intermediary_Proto* release_intermediary();
  ::com::example::Intermediary_Proto* mutable_intermediary();
  void set_allocated_intermediary(::com::example::Intermediary_Proto* intermediary);
  private:
  const ::com::example::Intermediary_Proto& _internal_intermediary() const;
  ::com::example::Intermediary_Proto* _internal_mutable_intermediary();
  public:
  void unsafe_arena_set_allocated_intermediary(
      ::com::example::Intermediary_Proto* intermediary);
  ::com::example::Intermediary_Proto* unsafe_arena_release_intermediary();

  // @@protoc_insertion_point(class_scope:com.example.MutualFundManager_Proto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::example::Intermediary_Proto* intermediary_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_demo_2fsrc_2fmain_2fproto_2ffinancial_5fportfolio_2eproto;
};
// -------------------------------------------------------------------

class Snapshot_Proto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.example.Snapshot_Proto) */ {
 public:
  inline Snapshot_Proto() : Snapshot_Proto(nullptr) {};
  virtual ~Snapshot_Proto();

  Snapshot_Proto(const Snapshot_Proto& from);
  Snapshot_Proto(Snapshot_Proto&& from) noexcept
    : Snapshot_Proto() {
    *this = ::std::move(from);
  }

  inline Snapshot_Proto& operator=(const Snapshot_Proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline Snapshot_Proto& operator=(Snapshot_Proto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Snapshot_Proto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Snapshot_Proto* internal_default_instance() {
    return reinterpret_cast<const Snapshot_Proto*>(
               &_Snapshot_Proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Snapshot_Proto& a, Snapshot_Proto& b) {
    a.Swap(&b);
  }
  inline void Swap(Snapshot_Proto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Snapshot_Proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Snapshot_Proto* New() const final {
    return CreateMaybeMessage<Snapshot_Proto>(nullptr);
  }

  Snapshot_Proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Snapshot_Proto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Snapshot_Proto& from);
  void MergeFrom(const Snapshot_Proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Snapshot_Proto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.example.Snapshot_Proto";
  }
  protected:
  explicit Snapshot_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_demo_2fsrc_2fmain_2fproto_2ffinancial_5fportfolio_2eproto);
    return ::descriptor_table_demo_2fsrc_2fmain_2fproto_2ffinancial_5fportfolio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssetNameFieldNumber = 1,
    kTimestampFieldNumber = 3,
    kAssetValueFieldNumber = 2,
  };
  // string assetName = 1;
  void clear_assetname();
  const std::string& assetname() const;
  void set_assetname(const std::string& value);
  void set_assetname(std::string&& value);
  void set_assetname(const char* value);
  void set_assetname(const char* value, size_t size);
  std::string* mutable_assetname();
  std::string* release_assetname();
  void set_allocated_assetname(std::string* assetname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_assetname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_assetname(
      std::string* assetname);
  private:
  const std::string& _internal_assetname() const;
  void _internal_set_assetname(const std::string& value);
  std::string* _internal_mutable_assetname();
  public:

  // string timestamp = 3;
  void clear_timestamp();
  const std::string& timestamp() const;
  void set_timestamp(const std::string& value);
  void set_timestamp(std::string&& value);
  void set_timestamp(const char* value);
  void set_timestamp(const char* value, size_t size);
  std::string* mutable_timestamp();
  std::string* release_timestamp();
  void set_allocated_timestamp(std::string* timestamp);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_timestamp();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_timestamp(
      std::string* timestamp);
  private:
  const std::string& _internal_timestamp() const;
  void _internal_set_timestamp(const std::string& value);
  std::string* _internal_mutable_timestamp();
  public:

  // float assetValue = 2;
  void clear_assetvalue();
  float assetvalue() const;
  void set_assetvalue(float value);
  private:
  float _internal_assetvalue() const;
  void _internal_set_assetvalue(float value);
  public:

  // @@protoc_insertion_point(class_scope:com.example.Snapshot_Proto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr assetname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timestamp_;
  float assetvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_demo_2fsrc_2fmain_2fproto_2ffinancial_5fportfolio_2eproto;
};
// -------------------------------------------------------------------

class Portfolio_Proto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.example.Portfolio_Proto) */ {
 public:
  inline Portfolio_Proto() : Portfolio_Proto(nullptr) {};
  virtual ~Portfolio_Proto();

  Portfolio_Proto(const Portfolio_Proto& from);
  Portfolio_Proto(Portfolio_Proto&& from) noexcept
    : Portfolio_Proto() {
    *this = ::std::move(from);
  }

  inline Portfolio_Proto& operator=(const Portfolio_Proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline Portfolio_Proto& operator=(Portfolio_Proto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Portfolio_Proto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Portfolio_Proto* internal_default_instance() {
    return reinterpret_cast<const Portfolio_Proto*>(
               &_Portfolio_Proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Portfolio_Proto& a, Portfolio_Proto& b) {
    a.Swap(&b);
  }
  inline void Swap(Portfolio_Proto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Portfolio_Proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Portfolio_Proto* New() const final {
    return CreateMaybeMessage<Portfolio_Proto>(nullptr);
  }

  Portfolio_Proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Portfolio_Proto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Portfolio_Proto& from);
  void MergeFrom(const Portfolio_Proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Portfolio_Proto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.example.Portfolio_Proto";
  }
  protected:
  explicit Portfolio_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_demo_2fsrc_2fmain_2fproto_2ffinancial_5fportfolio_2eproto);
    return ::descriptor_table_demo_2fsrc_2fmain_2fproto_2ffinancial_5fportfolio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssetsFieldNumber = 1,
    kIntermediariesFieldNumber = 2,
    kSnapshotsFieldNumber = 3,
  };
  // repeated .com.example.Asset_Proto assets = 1;
  int assets_size() const;
  private:
  int _internal_assets_size() const;
  public:
  void clear_assets();
  ::com::example::Asset_Proto* mutable_assets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::example::Asset_Proto >*
      mutable_assets();
  private:
  const ::com::example::Asset_Proto& _internal_assets(int index) const;
  ::com::example::Asset_Proto* _internal_add_assets();
  public:
  const ::com::example::Asset_Proto& assets(int index) const;
  ::com::example::Asset_Proto* add_assets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::example::Asset_Proto >&
      assets() const;

  // repeated .com.example.Intermediary_Proto intermediaries = 2;
  int intermediaries_size() const;
  private:
  int _internal_intermediaries_size() const;
  public:
  void clear_intermediaries();
  ::com::example::Intermediary_Proto* mutable_intermediaries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::example::Intermediary_Proto >*
      mutable_intermediaries();
  private:
  const ::com::example::Intermediary_Proto& _internal_intermediaries(int index) const;
  ::com::example::Intermediary_Proto* _internal_add_intermediaries();
  public:
  const ::com::example::Intermediary_Proto& intermediaries(int index) const;
  ::com::example::Intermediary_Proto* add_intermediaries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::example::Intermediary_Proto >&
      intermediaries() const;

  // repeated .com.example.Snapshot_Proto snapshots = 3;
  int snapshots_size() const;
  private:
  int _internal_snapshots_size() const;
  public:
  void clear_snapshots();
  ::com::example::Snapshot_Proto* mutable_snapshots(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::example::Snapshot_Proto >*
      mutable_snapshots();
  private:
  const ::com::example::Snapshot_Proto& _internal_snapshots(int index) const;
  ::com::example::Snapshot_Proto* _internal_add_snapshots();
  public:
  const ::com::example::Snapshot_Proto& snapshots(int index) const;
  ::com::example::Snapshot_Proto* add_snapshots();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::example::Snapshot_Proto >&
      snapshots() const;

  // @@protoc_insertion_point(class_scope:com.example.Portfolio_Proto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::example::Asset_Proto > assets_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::example::Intermediary_Proto > intermediaries_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::example::Snapshot_Proto > snapshots_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_demo_2fsrc_2fmain_2fproto_2ffinancial_5fportfolio_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Asset_Proto

// string type = 1;
inline void Asset_Proto::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Asset_Proto::type() const {
  // @@protoc_insertion_point(field_get:com.example.Asset_Proto.type)
  return _internal_type();
}
inline void Asset_Proto::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:com.example.Asset_Proto.type)
}
inline std::string* Asset_Proto::mutable_type() {
  // @@protoc_insertion_point(field_mutable:com.example.Asset_Proto.type)
  return _internal_mutable_type();
}
inline const std::string& Asset_Proto::_internal_type() const {
  return type_.Get();
}
inline void Asset_Proto::_internal_set_type(const std::string& value) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Asset_Proto::set_type(std::string&& value) {
  
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.example.Asset_Proto.type)
}
inline void Asset_Proto::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.example.Asset_Proto.type)
}
inline void Asset_Proto::set_type(const char* value,
    size_t size) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.example.Asset_Proto.type)
}
inline std::string* Asset_Proto::_internal_mutable_type() {
  
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Asset_Proto::release_type() {
  // @@protoc_insertion_point(field_release:com.example.Asset_Proto.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Asset_Proto::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.example.Asset_Proto.type)
}
inline std::string* Asset_Proto::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.example.Asset_Proto.type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Asset_Proto::unsafe_arena_set_allocated_type(
    std::string* type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (type != nullptr) {
    
  } else {
    
  }
  type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.example.Asset_Proto.type)
}

// .com.example.Stock_Proto stock = 2;
inline bool Asset_Proto::_internal_has_stock() const {
  return asset_case() == kStock;
}
inline bool Asset_Proto::has_stock() const {
  return _internal_has_stock();
}
inline void Asset_Proto::set_has_stock() {
  _oneof_case_[0] = kStock;
}
inline void Asset_Proto::clear_stock() {
  if (_internal_has_stock()) {
    if (GetArena() == nullptr) {
      delete asset_.stock_;
    }
    clear_has_asset();
  }
}
inline ::com::example::Stock_Proto* Asset_Proto::release_stock() {
  // @@protoc_insertion_point(field_release:com.example.Asset_Proto.stock)
  if (_internal_has_stock()) {
    clear_has_asset();
      ::com::example::Stock_Proto* temp = asset_.stock_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    asset_.stock_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::example::Stock_Proto& Asset_Proto::_internal_stock() const {
  return _internal_has_stock()
      ? *asset_.stock_
      : *reinterpret_cast< ::com::example::Stock_Proto*>(&::com::example::_Stock_Proto_default_instance_);
}
inline const ::com::example::Stock_Proto& Asset_Proto::stock() const {
  // @@protoc_insertion_point(field_get:com.example.Asset_Proto.stock)
  return _internal_stock();
}
inline ::com::example::Stock_Proto* Asset_Proto::unsafe_arena_release_stock() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.example.Asset_Proto.stock)
  if (_internal_has_stock()) {
    clear_has_asset();
    ::com::example::Stock_Proto* temp = asset_.stock_;
    asset_.stock_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Asset_Proto::unsafe_arena_set_allocated_stock(::com::example::Stock_Proto* stock) {
  clear_asset();
  if (stock) {
    set_has_stock();
    asset_.stock_ = stock;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.example.Asset_Proto.stock)
}
inline ::com::example::Stock_Proto* Asset_Proto::_internal_mutable_stock() {
  if (!_internal_has_stock()) {
    clear_asset();
    set_has_stock();
    asset_.stock_ = CreateMaybeMessage< ::com::example::Stock_Proto >(GetArena());
  }
  return asset_.stock_;
}
inline ::com::example::Stock_Proto* Asset_Proto::mutable_stock() {
  // @@protoc_insertion_point(field_mutable:com.example.Asset_Proto.stock)
  return _internal_mutable_stock();
}

// .com.example.Bond_Proto bond = 3;
inline bool Asset_Proto::_internal_has_bond() const {
  return asset_case() == kBond;
}
inline bool Asset_Proto::has_bond() const {
  return _internal_has_bond();
}
inline void Asset_Proto::set_has_bond() {
  _oneof_case_[0] = kBond;
}
inline void Asset_Proto::clear_bond() {
  if (_internal_has_bond()) {
    if (GetArena() == nullptr) {
      delete asset_.bond_;
    }
    clear_has_asset();
  }
}
inline ::com::example::Bond_Proto* Asset_Proto::release_bond() {
  // @@protoc_insertion_point(field_release:com.example.Asset_Proto.bond)
  if (_internal_has_bond()) {
    clear_has_asset();
      ::com::example::Bond_Proto* temp = asset_.bond_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    asset_.bond_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::example::Bond_Proto& Asset_Proto::_internal_bond() const {
  return _internal_has_bond()
      ? *asset_.bond_
      : *reinterpret_cast< ::com::example::Bond_Proto*>(&::com::example::_Bond_Proto_default_instance_);
}
inline const ::com::example::Bond_Proto& Asset_Proto::bond() const {
  // @@protoc_insertion_point(field_get:com.example.Asset_Proto.bond)
  return _internal_bond();
}
inline ::com::example::Bond_Proto* Asset_Proto::unsafe_arena_release_bond() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.example.Asset_Proto.bond)
  if (_internal_has_bond()) {
    clear_has_asset();
    ::com::example::Bond_Proto* temp = asset_.bond_;
    asset_.bond_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Asset_Proto::unsafe_arena_set_allocated_bond(::com::example::Bond_Proto* bond) {
  clear_asset();
  if (bond) {
    set_has_bond();
    asset_.bond_ = bond;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.example.Asset_Proto.bond)
}
inline ::com::example::Bond_Proto* Asset_Proto::_internal_mutable_bond() {
  if (!_internal_has_bond()) {
    clear_asset();
    set_has_bond();
    asset_.bond_ = CreateMaybeMessage< ::com::example::Bond_Proto >(GetArena());
  }
  return asset_.bond_;
}
inline ::com::example::Bond_Proto* Asset_Proto::mutable_bond() {
  // @@protoc_insertion_point(field_mutable:com.example.Asset_Proto.bond)
  return _internal_mutable_bond();
}

// .com.example.MutualFund_Proto mutualFund = 4;
inline bool Asset_Proto::_internal_has_mutualfund() const {
  return asset_case() == kMutualFund;
}
inline bool Asset_Proto::has_mutualfund() const {
  return _internal_has_mutualfund();
}
inline void Asset_Proto::set_has_mutualfund() {
  _oneof_case_[0] = kMutualFund;
}
inline void Asset_Proto::clear_mutualfund() {
  if (_internal_has_mutualfund()) {
    if (GetArena() == nullptr) {
      delete asset_.mutualfund_;
    }
    clear_has_asset();
  }
}
inline ::com::example::MutualFund_Proto* Asset_Proto::release_mutualfund() {
  // @@protoc_insertion_point(field_release:com.example.Asset_Proto.mutualFund)
  if (_internal_has_mutualfund()) {
    clear_has_asset();
      ::com::example::MutualFund_Proto* temp = asset_.mutualfund_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    asset_.mutualfund_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::example::MutualFund_Proto& Asset_Proto::_internal_mutualfund() const {
  return _internal_has_mutualfund()
      ? *asset_.mutualfund_
      : *reinterpret_cast< ::com::example::MutualFund_Proto*>(&::com::example::_MutualFund_Proto_default_instance_);
}
inline const ::com::example::MutualFund_Proto& Asset_Proto::mutualfund() const {
  // @@protoc_insertion_point(field_get:com.example.Asset_Proto.mutualFund)
  return _internal_mutualfund();
}
inline ::com::example::MutualFund_Proto* Asset_Proto::unsafe_arena_release_mutualfund() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.example.Asset_Proto.mutualFund)
  if (_internal_has_mutualfund()) {
    clear_has_asset();
    ::com::example::MutualFund_Proto* temp = asset_.mutualfund_;
    asset_.mutualfund_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Asset_Proto::unsafe_arena_set_allocated_mutualfund(::com::example::MutualFund_Proto* mutualfund) {
  clear_asset();
  if (mutualfund) {
    set_has_mutualfund();
    asset_.mutualfund_ = mutualfund;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.example.Asset_Proto.mutualFund)
}
inline ::com::example::MutualFund_Proto* Asset_Proto::_internal_mutable_mutualfund() {
  if (!_internal_has_mutualfund()) {
    clear_asset();
    set_has_mutualfund();
    asset_.mutualfund_ = CreateMaybeMessage< ::com::example::MutualFund_Proto >(GetArena());
  }
  return asset_.mutualfund_;
}
inline ::com::example::MutualFund_Proto* Asset_Proto::mutable_mutualfund() {
  // @@protoc_insertion_point(field_mutable:com.example.Asset_Proto.mutualFund)
  return _internal_mutable_mutualfund();
}

inline bool Asset_Proto::has_asset() const {
  return asset_case() != ASSET_NOT_SET;
}
inline void Asset_Proto::clear_has_asset() {
  _oneof_case_[0] = ASSET_NOT_SET;
}
inline Asset_Proto::AssetCase Asset_Proto::asset_case() const {
  return Asset_Proto::AssetCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// BaseAsset_Proto

// string name = 1;
inline void BaseAsset_Proto::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BaseAsset_Proto::name() const {
  // @@protoc_insertion_point(field_get:com.example.BaseAsset_Proto.name)
  return _internal_name();
}
inline void BaseAsset_Proto::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:com.example.BaseAsset_Proto.name)
}
inline std::string* BaseAsset_Proto::mutable_name() {
  // @@protoc_insertion_point(field_mutable:com.example.BaseAsset_Proto.name)
  return _internal_mutable_name();
}
inline const std::string& BaseAsset_Proto::_internal_name() const {
  return name_.Get();
}
inline void BaseAsset_Proto::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BaseAsset_Proto::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.example.BaseAsset_Proto.name)
}
inline void BaseAsset_Proto::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.example.BaseAsset_Proto.name)
}
inline void BaseAsset_Proto::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.example.BaseAsset_Proto.name)
}
inline std::string* BaseAsset_Proto::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BaseAsset_Proto::release_name() {
  // @@protoc_insertion_point(field_release:com.example.BaseAsset_Proto.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BaseAsset_Proto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.example.BaseAsset_Proto.name)
}
inline std::string* BaseAsset_Proto::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.example.BaseAsset_Proto.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BaseAsset_Proto::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.example.BaseAsset_Proto.name)
}

// float value = 2;
inline void BaseAsset_Proto::clear_value() {
  value_ = 0;
}
inline float BaseAsset_Proto::_internal_value() const {
  return value_;
}
inline float BaseAsset_Proto::value() const {
  // @@protoc_insertion_point(field_get:com.example.BaseAsset_Proto.value)
  return _internal_value();
}
inline void BaseAsset_Proto::_internal_set_value(float value) {
  
  value_ = value;
}
inline void BaseAsset_Proto::set_value(float value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:com.example.BaseAsset_Proto.value)
}

// -------------------------------------------------------------------

// Stock_Proto

// .com.example.BaseAsset_Proto baseAsset = 1;
inline bool Stock_Proto::_internal_has_baseasset() const {
  return this != internal_default_instance() && baseasset_ != nullptr;
}
inline bool Stock_Proto::has_baseasset() const {
  return _internal_has_baseasset();
}
inline void Stock_Proto::clear_baseasset() {
  if (GetArena() == nullptr && baseasset_ != nullptr) {
    delete baseasset_;
  }
  baseasset_ = nullptr;
}
inline const ::com::example::BaseAsset_Proto& Stock_Proto::_internal_baseasset() const {
  const ::com::example::BaseAsset_Proto* p = baseasset_;
  return p != nullptr ? *p : *reinterpret_cast<const ::com::example::BaseAsset_Proto*>(
      &::com::example::_BaseAsset_Proto_default_instance_);
}
inline const ::com::example::BaseAsset_Proto& Stock_Proto::baseasset() const {
  // @@protoc_insertion_point(field_get:com.example.Stock_Proto.baseAsset)
  return _internal_baseasset();
}
inline void Stock_Proto::unsafe_arena_set_allocated_baseasset(
    ::com::example::BaseAsset_Proto* baseasset) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(baseasset_);
  }
  baseasset_ = baseasset;
  if (baseasset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.example.Stock_Proto.baseAsset)
}
inline ::com::example::BaseAsset_Proto* Stock_Proto::release_baseasset() {
  auto temp = unsafe_arena_release_baseasset();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::example::BaseAsset_Proto* Stock_Proto::unsafe_arena_release_baseasset() {
  // @@protoc_insertion_point(field_release:com.example.Stock_Proto.baseAsset)
  
  ::com::example::BaseAsset_Proto* temp = baseasset_;
  baseasset_ = nullptr;
  return temp;
}
inline ::com::example::BaseAsset_Proto* Stock_Proto::_internal_mutable_baseasset() {
  
  if (baseasset_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::example::BaseAsset_Proto>(GetArena());
    baseasset_ = p;
  }
  return baseasset_;
}
inline ::com::example::BaseAsset_Proto* Stock_Proto::mutable_baseasset() {
  // @@protoc_insertion_point(field_mutable:com.example.Stock_Proto.baseAsset)
  return _internal_mutable_baseasset();
}
inline void Stock_Proto::set_allocated_baseasset(::com::example::BaseAsset_Proto* baseasset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete baseasset_;
  }
  if (baseasset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(baseasset);
    if (message_arena != submessage_arena) {
      baseasset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, baseasset, submessage_arena);
    }
    
  } else {
    
  }
  baseasset_ = baseasset;
  // @@protoc_insertion_point(field_set_allocated:com.example.Stock_Proto.baseAsset)
}

// string ticker = 2;
inline void Stock_Proto::clear_ticker() {
  ticker_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Stock_Proto::ticker() const {
  // @@protoc_insertion_point(field_get:com.example.Stock_Proto.ticker)
  return _internal_ticker();
}
inline void Stock_Proto::set_ticker(const std::string& value) {
  _internal_set_ticker(value);
  // @@protoc_insertion_point(field_set:com.example.Stock_Proto.ticker)
}
inline std::string* Stock_Proto::mutable_ticker() {
  // @@protoc_insertion_point(field_mutable:com.example.Stock_Proto.ticker)
  return _internal_mutable_ticker();
}
inline const std::string& Stock_Proto::_internal_ticker() const {
  return ticker_.Get();
}
inline void Stock_Proto::_internal_set_ticker(const std::string& value) {
  
  ticker_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Stock_Proto::set_ticker(std::string&& value) {
  
  ticker_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.example.Stock_Proto.ticker)
}
inline void Stock_Proto::set_ticker(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ticker_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.example.Stock_Proto.ticker)
}
inline void Stock_Proto::set_ticker(const char* value,
    size_t size) {
  
  ticker_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.example.Stock_Proto.ticker)
}
inline std::string* Stock_Proto::_internal_mutable_ticker() {
  
  return ticker_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Stock_Proto::release_ticker() {
  // @@protoc_insertion_point(field_release:com.example.Stock_Proto.ticker)
  return ticker_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Stock_Proto::set_allocated_ticker(std::string* ticker) {
  if (ticker != nullptr) {
    
  } else {
    
  }
  ticker_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ticker,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.example.Stock_Proto.ticker)
}
inline std::string* Stock_Proto::unsafe_arena_release_ticker() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.example.Stock_Proto.ticker)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ticker_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Stock_Proto::unsafe_arena_set_allocated_ticker(
    std::string* ticker) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ticker != nullptr) {
    
  } else {
    
  }
  ticker_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ticker, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.example.Stock_Proto.ticker)
}

// int32 shares = 3;
inline void Stock_Proto::clear_shares() {
  shares_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Stock_Proto::_internal_shares() const {
  return shares_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Stock_Proto::shares() const {
  // @@protoc_insertion_point(field_get:com.example.Stock_Proto.shares)
  return _internal_shares();
}
inline void Stock_Proto::_internal_set_shares(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  shares_ = value;
}
inline void Stock_Proto::set_shares(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_shares(value);
  // @@protoc_insertion_point(field_set:com.example.Stock_Proto.shares)
}

// float dividendYield = 4;
inline void Stock_Proto::clear_dividendyield() {
  dividendyield_ = 0;
}
inline float Stock_Proto::_internal_dividendyield() const {
  return dividendyield_;
}
inline float Stock_Proto::dividendyield() const {
  // @@protoc_insertion_point(field_get:com.example.Stock_Proto.dividendYield)
  return _internal_dividendyield();
}
inline void Stock_Proto::_internal_set_dividendyield(float value) {
  
  dividendyield_ = value;
}
inline void Stock_Proto::set_dividendyield(float value) {
  _internal_set_dividendyield(value);
  // @@protoc_insertion_point(field_set:com.example.Stock_Proto.dividendYield)
}

// -------------------------------------------------------------------

// Bond_Proto

// .com.example.BaseAsset_Proto baseAsset = 1;
inline bool Bond_Proto::_internal_has_baseasset() const {
  return this != internal_default_instance() && baseasset_ != nullptr;
}
inline bool Bond_Proto::has_baseasset() const {
  return _internal_has_baseasset();
}
inline void Bond_Proto::clear_baseasset() {
  if (GetArena() == nullptr && baseasset_ != nullptr) {
    delete baseasset_;
  }
  baseasset_ = nullptr;
}
inline const ::com::example::BaseAsset_Proto& Bond_Proto::_internal_baseasset() const {
  const ::com::example::BaseAsset_Proto* p = baseasset_;
  return p != nullptr ? *p : *reinterpret_cast<const ::com::example::BaseAsset_Proto*>(
      &::com::example::_BaseAsset_Proto_default_instance_);
}
inline const ::com::example::BaseAsset_Proto& Bond_Proto::baseasset() const {
  // @@protoc_insertion_point(field_get:com.example.Bond_Proto.baseAsset)
  return _internal_baseasset();
}
inline void Bond_Proto::unsafe_arena_set_allocated_baseasset(
    ::com::example::BaseAsset_Proto* baseasset) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(baseasset_);
  }
  baseasset_ = baseasset;
  if (baseasset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.example.Bond_Proto.baseAsset)
}
inline ::com::example::BaseAsset_Proto* Bond_Proto::release_baseasset() {
  auto temp = unsafe_arena_release_baseasset();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::example::BaseAsset_Proto* Bond_Proto::unsafe_arena_release_baseasset() {
  // @@protoc_insertion_point(field_release:com.example.Bond_Proto.baseAsset)
  
  ::com::example::BaseAsset_Proto* temp = baseasset_;
  baseasset_ = nullptr;
  return temp;
}
inline ::com::example::BaseAsset_Proto* Bond_Proto::_internal_mutable_baseasset() {
  
  if (baseasset_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::example::BaseAsset_Proto>(GetArena());
    baseasset_ = p;
  }
  return baseasset_;
}
inline ::com::example::BaseAsset_Proto* Bond_Proto::mutable_baseasset() {
  // @@protoc_insertion_point(field_mutable:com.example.Bond_Proto.baseAsset)
  return _internal_mutable_baseasset();
}
inline void Bond_Proto::set_allocated_baseasset(::com::example::BaseAsset_Proto* baseasset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete baseasset_;
  }
  if (baseasset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(baseasset);
    if (message_arena != submessage_arena) {
      baseasset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, baseasset, submessage_arena);
    }
    
  } else {
    
  }
  baseasset_ = baseasset;
  // @@protoc_insertion_point(field_set_allocated:com.example.Bond_Proto.baseAsset)
}

// float interestRate = 2;
inline void Bond_Proto::clear_interestrate() {
  interestrate_ = 0;
}
inline float Bond_Proto::_internal_interestrate() const {
  return interestrate_;
}
inline float Bond_Proto::interestrate() const {
  // @@protoc_insertion_point(field_get:com.example.Bond_Proto.interestRate)
  return _internal_interestrate();
}
inline void Bond_Proto::_internal_set_interestrate(float value) {
  
  interestrate_ = value;
}
inline void Bond_Proto::set_interestrate(float value) {
  _internal_set_interestrate(value);
  // @@protoc_insertion_point(field_set:com.example.Bond_Proto.interestRate)
}

// string maturityDate = 3;
inline void Bond_Proto::clear_maturitydate() {
  maturitydate_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Bond_Proto::maturitydate() const {
  // @@protoc_insertion_point(field_get:com.example.Bond_Proto.maturityDate)
  return _internal_maturitydate();
}
inline void Bond_Proto::set_maturitydate(const std::string& value) {
  _internal_set_maturitydate(value);
  // @@protoc_insertion_point(field_set:com.example.Bond_Proto.maturityDate)
}
inline std::string* Bond_Proto::mutable_maturitydate() {
  // @@protoc_insertion_point(field_mutable:com.example.Bond_Proto.maturityDate)
  return _internal_mutable_maturitydate();
}
inline const std::string& Bond_Proto::_internal_maturitydate() const {
  return maturitydate_.Get();
}
inline void Bond_Proto::_internal_set_maturitydate(const std::string& value) {
  
  maturitydate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Bond_Proto::set_maturitydate(std::string&& value) {
  
  maturitydate_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.example.Bond_Proto.maturityDate)
}
inline void Bond_Proto::set_maturitydate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  maturitydate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.example.Bond_Proto.maturityDate)
}
inline void Bond_Proto::set_maturitydate(const char* value,
    size_t size) {
  
  maturitydate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.example.Bond_Proto.maturityDate)
}
inline std::string* Bond_Proto::_internal_mutable_maturitydate() {
  
  return maturitydate_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Bond_Proto::release_maturitydate() {
  // @@protoc_insertion_point(field_release:com.example.Bond_Proto.maturityDate)
  return maturitydate_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Bond_Proto::set_allocated_maturitydate(std::string* maturitydate) {
  if (maturitydate != nullptr) {
    
  } else {
    
  }
  maturitydate_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), maturitydate,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.example.Bond_Proto.maturityDate)
}
inline std::string* Bond_Proto::unsafe_arena_release_maturitydate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.example.Bond_Proto.maturityDate)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return maturitydate_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Bond_Proto::unsafe_arena_set_allocated_maturitydate(
    std::string* maturitydate) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (maturitydate != nullptr) {
    
  } else {
    
  }
  maturitydate_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      maturitydate, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.example.Bond_Proto.maturityDate)
}

// -------------------------------------------------------------------

// MutualFund_Proto

// .com.example.BaseAsset_Proto baseAsset = 1;
inline bool MutualFund_Proto::_internal_has_baseasset() const {
  return this != internal_default_instance() && baseasset_ != nullptr;
}
inline bool MutualFund_Proto::has_baseasset() const {
  return _internal_has_baseasset();
}
inline void MutualFund_Proto::clear_baseasset() {
  if (GetArena() == nullptr && baseasset_ != nullptr) {
    delete baseasset_;
  }
  baseasset_ = nullptr;
}
inline const ::com::example::BaseAsset_Proto& MutualFund_Proto::_internal_baseasset() const {
  const ::com::example::BaseAsset_Proto* p = baseasset_;
  return p != nullptr ? *p : *reinterpret_cast<const ::com::example::BaseAsset_Proto*>(
      &::com::example::_BaseAsset_Proto_default_instance_);
}
inline const ::com::example::BaseAsset_Proto& MutualFund_Proto::baseasset() const {
  // @@protoc_insertion_point(field_get:com.example.MutualFund_Proto.baseAsset)
  return _internal_baseasset();
}
inline void MutualFund_Proto::unsafe_arena_set_allocated_baseasset(
    ::com::example::BaseAsset_Proto* baseasset) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(baseasset_);
  }
  baseasset_ = baseasset;
  if (baseasset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.example.MutualFund_Proto.baseAsset)
}
inline ::com::example::BaseAsset_Proto* MutualFund_Proto::release_baseasset() {
  auto temp = unsafe_arena_release_baseasset();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::example::BaseAsset_Proto* MutualFund_Proto::unsafe_arena_release_baseasset() {
  // @@protoc_insertion_point(field_release:com.example.MutualFund_Proto.baseAsset)
  
  ::com::example::BaseAsset_Proto* temp = baseasset_;
  baseasset_ = nullptr;
  return temp;
}
inline ::com::example::BaseAsset_Proto* MutualFund_Proto::_internal_mutable_baseasset() {
  
  if (baseasset_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::example::BaseAsset_Proto>(GetArena());
    baseasset_ = p;
  }
  return baseasset_;
}
inline ::com::example::BaseAsset_Proto* MutualFund_Proto::mutable_baseasset() {
  // @@protoc_insertion_point(field_mutable:com.example.MutualFund_Proto.baseAsset)
  return _internal_mutable_baseasset();
}
inline void MutualFund_Proto::set_allocated_baseasset(::com::example::BaseAsset_Proto* baseasset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete baseasset_;
  }
  if (baseasset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(baseasset);
    if (message_arena != submessage_arena) {
      baseasset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, baseasset, submessage_arena);
    }
    
  } else {
    
  }
  baseasset_ = baseasset;
  // @@protoc_insertion_point(field_set_allocated:com.example.MutualFund_Proto.baseAsset)
}

// float expenseRatio = 2;
inline void MutualFund_Proto::clear_expenseratio() {
  expenseratio_ = 0;
}
inline float MutualFund_Proto::_internal_expenseratio() const {
  return expenseratio_;
}
inline float MutualFund_Proto::expenseratio() const {
  // @@protoc_insertion_point(field_get:com.example.MutualFund_Proto.expenseRatio)
  return _internal_expenseratio();
}
inline void MutualFund_Proto::_internal_set_expenseratio(float value) {
  
  expenseratio_ = value;
}
inline void MutualFund_Proto::set_expenseratio(float value) {
  _internal_set_expenseratio(value);
  // @@protoc_insertion_point(field_set:com.example.MutualFund_Proto.expenseRatio)
}

// -------------------------------------------------------------------

// Intermediary_Proto

// string type = 1;
inline void Intermediary_Proto::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Intermediary_Proto::type() const {
  // @@protoc_insertion_point(field_get:com.example.Intermediary_Proto.type)
  return _internal_type();
}
inline void Intermediary_Proto::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:com.example.Intermediary_Proto.type)
}
inline std::string* Intermediary_Proto::mutable_type() {
  // @@protoc_insertion_point(field_mutable:com.example.Intermediary_Proto.type)
  return _internal_mutable_type();
}
inline const std::string& Intermediary_Proto::_internal_type() const {
  return type_.Get();
}
inline void Intermediary_Proto::_internal_set_type(const std::string& value) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Intermediary_Proto::set_type(std::string&& value) {
  
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.example.Intermediary_Proto.type)
}
inline void Intermediary_Proto::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.example.Intermediary_Proto.type)
}
inline void Intermediary_Proto::set_type(const char* value,
    size_t size) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.example.Intermediary_Proto.type)
}
inline std::string* Intermediary_Proto::_internal_mutable_type() {
  
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Intermediary_Proto::release_type() {
  // @@protoc_insertion_point(field_release:com.example.Intermediary_Proto.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Intermediary_Proto::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.example.Intermediary_Proto.type)
}
inline std::string* Intermediary_Proto::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.example.Intermediary_Proto.type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Intermediary_Proto::unsafe_arena_set_allocated_type(
    std::string* type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (type != nullptr) {
    
  } else {
    
  }
  type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.example.Intermediary_Proto.type)
}

// string name = 2;
inline void Intermediary_Proto::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Intermediary_Proto::name() const {
  // @@protoc_insertion_point(field_get:com.example.Intermediary_Proto.name)
  return _internal_name();
}
inline void Intermediary_Proto::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:com.example.Intermediary_Proto.name)
}
inline std::string* Intermediary_Proto::mutable_name() {
  // @@protoc_insertion_point(field_mutable:com.example.Intermediary_Proto.name)
  return _internal_mutable_name();
}
inline const std::string& Intermediary_Proto::_internal_name() const {
  return name_.Get();
}
inline void Intermediary_Proto::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Intermediary_Proto::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.example.Intermediary_Proto.name)
}
inline void Intermediary_Proto::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.example.Intermediary_Proto.name)
}
inline void Intermediary_Proto::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.example.Intermediary_Proto.name)
}
inline std::string* Intermediary_Proto::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Intermediary_Proto::release_name() {
  // @@protoc_insertion_point(field_release:com.example.Intermediary_Proto.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Intermediary_Proto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.example.Intermediary_Proto.name)
}
inline std::string* Intermediary_Proto::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.example.Intermediary_Proto.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Intermediary_Proto::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.example.Intermediary_Proto.name)
}

// .com.example.Broker_Proto broker = 3;
inline bool Intermediary_Proto::_internal_has_broker() const {
  return intermediary_case() == kBroker;
}
inline bool Intermediary_Proto::has_broker() const {
  return _internal_has_broker();
}
inline void Intermediary_Proto::set_has_broker() {
  _oneof_case_[0] = kBroker;
}
inline void Intermediary_Proto::clear_broker() {
  if (_internal_has_broker()) {
    if (GetArena() == nullptr) {
      delete intermediary_.broker_;
    }
    clear_has_intermediary();
  }
}
inline ::com::example::Broker_Proto* Intermediary_Proto::release_broker() {
  // @@protoc_insertion_point(field_release:com.example.Intermediary_Proto.broker)
  if (_internal_has_broker()) {
    clear_has_intermediary();
      ::com::example::Broker_Proto* temp = intermediary_.broker_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    intermediary_.broker_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::example::Broker_Proto& Intermediary_Proto::_internal_broker() const {
  return _internal_has_broker()
      ? *intermediary_.broker_
      : *reinterpret_cast< ::com::example::Broker_Proto*>(&::com::example::_Broker_Proto_default_instance_);
}
inline const ::com::example::Broker_Proto& Intermediary_Proto::broker() const {
  // @@protoc_insertion_point(field_get:com.example.Intermediary_Proto.broker)
  return _internal_broker();
}
inline ::com::example::Broker_Proto* Intermediary_Proto::unsafe_arena_release_broker() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.example.Intermediary_Proto.broker)
  if (_internal_has_broker()) {
    clear_has_intermediary();
    ::com::example::Broker_Proto* temp = intermediary_.broker_;
    intermediary_.broker_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Intermediary_Proto::unsafe_arena_set_allocated_broker(::com::example::Broker_Proto* broker) {
  clear_intermediary();
  if (broker) {
    set_has_broker();
    intermediary_.broker_ = broker;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.example.Intermediary_Proto.broker)
}
inline ::com::example::Broker_Proto* Intermediary_Proto::_internal_mutable_broker() {
  if (!_internal_has_broker()) {
    clear_intermediary();
    set_has_broker();
    intermediary_.broker_ = CreateMaybeMessage< ::com::example::Broker_Proto >(GetArena());
  }
  return intermediary_.broker_;
}
inline ::com::example::Broker_Proto* Intermediary_Proto::mutable_broker() {
  // @@protoc_insertion_point(field_mutable:com.example.Intermediary_Proto.broker)
  return _internal_mutable_broker();
}

// .com.example.Bank_Proto bank = 4;
inline bool Intermediary_Proto::_internal_has_bank() const {
  return intermediary_case() == kBank;
}
inline bool Intermediary_Proto::has_bank() const {
  return _internal_has_bank();
}
inline void Intermediary_Proto::set_has_bank() {
  _oneof_case_[0] = kBank;
}
inline void Intermediary_Proto::clear_bank() {
  if (_internal_has_bank()) {
    if (GetArena() == nullptr) {
      delete intermediary_.bank_;
    }
    clear_has_intermediary();
  }
}
inline ::com::example::Bank_Proto* Intermediary_Proto::release_bank() {
  // @@protoc_insertion_point(field_release:com.example.Intermediary_Proto.bank)
  if (_internal_has_bank()) {
    clear_has_intermediary();
      ::com::example::Bank_Proto* temp = intermediary_.bank_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    intermediary_.bank_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::example::Bank_Proto& Intermediary_Proto::_internal_bank() const {
  return _internal_has_bank()
      ? *intermediary_.bank_
      : *reinterpret_cast< ::com::example::Bank_Proto*>(&::com::example::_Bank_Proto_default_instance_);
}
inline const ::com::example::Bank_Proto& Intermediary_Proto::bank() const {
  // @@protoc_insertion_point(field_get:com.example.Intermediary_Proto.bank)
  return _internal_bank();
}
inline ::com::example::Bank_Proto* Intermediary_Proto::unsafe_arena_release_bank() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.example.Intermediary_Proto.bank)
  if (_internal_has_bank()) {
    clear_has_intermediary();
    ::com::example::Bank_Proto* temp = intermediary_.bank_;
    intermediary_.bank_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Intermediary_Proto::unsafe_arena_set_allocated_bank(::com::example::Bank_Proto* bank) {
  clear_intermediary();
  if (bank) {
    set_has_bank();
    intermediary_.bank_ = bank;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.example.Intermediary_Proto.bank)
}
inline ::com::example::Bank_Proto* Intermediary_Proto::_internal_mutable_bank() {
  if (!_internal_has_bank()) {
    clear_intermediary();
    set_has_bank();
    intermediary_.bank_ = CreateMaybeMessage< ::com::example::Bank_Proto >(GetArena());
  }
  return intermediary_.bank_;
}
inline ::com::example::Bank_Proto* Intermediary_Proto::mutable_bank() {
  // @@protoc_insertion_point(field_mutable:com.example.Intermediary_Proto.bank)
  return _internal_mutable_bank();
}

// .com.example.MutualFundManager_Proto mutualFundManager = 5;
inline bool Intermediary_Proto::_internal_has_mutualfundmanager() const {
  return intermediary_case() == kMutualFundManager;
}
inline bool Intermediary_Proto::has_mutualfundmanager() const {
  return _internal_has_mutualfundmanager();
}
inline void Intermediary_Proto::set_has_mutualfundmanager() {
  _oneof_case_[0] = kMutualFundManager;
}
inline void Intermediary_Proto::clear_mutualfundmanager() {
  if (_internal_has_mutualfundmanager()) {
    if (GetArena() == nullptr) {
      delete intermediary_.mutualfundmanager_;
    }
    clear_has_intermediary();
  }
}
inline ::com::example::MutualFundManager_Proto* Intermediary_Proto::release_mutualfundmanager() {
  // @@protoc_insertion_point(field_release:com.example.Intermediary_Proto.mutualFundManager)
  if (_internal_has_mutualfundmanager()) {
    clear_has_intermediary();
      ::com::example::MutualFundManager_Proto* temp = intermediary_.mutualfundmanager_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    intermediary_.mutualfundmanager_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::example::MutualFundManager_Proto& Intermediary_Proto::_internal_mutualfundmanager() const {
  return _internal_has_mutualfundmanager()
      ? *intermediary_.mutualfundmanager_
      : *reinterpret_cast< ::com::example::MutualFundManager_Proto*>(&::com::example::_MutualFundManager_Proto_default_instance_);
}
inline const ::com::example::MutualFundManager_Proto& Intermediary_Proto::mutualfundmanager() const {
  // @@protoc_insertion_point(field_get:com.example.Intermediary_Proto.mutualFundManager)
  return _internal_mutualfundmanager();
}
inline ::com::example::MutualFundManager_Proto* Intermediary_Proto::unsafe_arena_release_mutualfundmanager() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.example.Intermediary_Proto.mutualFundManager)
  if (_internal_has_mutualfundmanager()) {
    clear_has_intermediary();
    ::com::example::MutualFundManager_Proto* temp = intermediary_.mutualfundmanager_;
    intermediary_.mutualfundmanager_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Intermediary_Proto::unsafe_arena_set_allocated_mutualfundmanager(::com::example::MutualFundManager_Proto* mutualfundmanager) {
  clear_intermediary();
  if (mutualfundmanager) {
    set_has_mutualfundmanager();
    intermediary_.mutualfundmanager_ = mutualfundmanager;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.example.Intermediary_Proto.mutualFundManager)
}
inline ::com::example::MutualFundManager_Proto* Intermediary_Proto::_internal_mutable_mutualfundmanager() {
  if (!_internal_has_mutualfundmanager()) {
    clear_intermediary();
    set_has_mutualfundmanager();
    intermediary_.mutualfundmanager_ = CreateMaybeMessage< ::com::example::MutualFundManager_Proto >(GetArena());
  }
  return intermediary_.mutualfundmanager_;
}
inline ::com::example::MutualFundManager_Proto* Intermediary_Proto::mutable_mutualfundmanager() {
  // @@protoc_insertion_point(field_mutable:com.example.Intermediary_Proto.mutualFundManager)
  return _internal_mutable_mutualfundmanager();
}

inline bool Intermediary_Proto::has_intermediary() const {
  return intermediary_case() != INTERMEDIARY_NOT_SET;
}
inline void Intermediary_Proto::clear_has_intermediary() {
  _oneof_case_[0] = INTERMEDIARY_NOT_SET;
}
inline Intermediary_Proto::IntermediaryCase Intermediary_Proto::intermediary_case() const {
  return Intermediary_Proto::IntermediaryCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Broker_Proto

// .com.example.Intermediary_Proto intermediary = 1;
inline bool Broker_Proto::_internal_has_intermediary() const {
  return this != internal_default_instance() && intermediary_ != nullptr;
}
inline bool Broker_Proto::has_intermediary() const {
  return _internal_has_intermediary();
}
inline void Broker_Proto::clear_intermediary() {
  if (GetArena() == nullptr && intermediary_ != nullptr) {
    delete intermediary_;
  }
  intermediary_ = nullptr;
}
inline const ::com::example::Intermediary_Proto& Broker_Proto::_internal_intermediary() const {
  const ::com::example::Intermediary_Proto* p = intermediary_;
  return p != nullptr ? *p : *reinterpret_cast<const ::com::example::Intermediary_Proto*>(
      &::com::example::_Intermediary_Proto_default_instance_);
}
inline const ::com::example::Intermediary_Proto& Broker_Proto::intermediary() const {
  // @@protoc_insertion_point(field_get:com.example.Broker_Proto.intermediary)
  return _internal_intermediary();
}
inline void Broker_Proto::unsafe_arena_set_allocated_intermediary(
    ::com::example::Intermediary_Proto* intermediary) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(intermediary_);
  }
  intermediary_ = intermediary;
  if (intermediary) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.example.Broker_Proto.intermediary)
}
inline ::com::example::Intermediary_Proto* Broker_Proto::release_intermediary() {
  auto temp = unsafe_arena_release_intermediary();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::example::Intermediary_Proto* Broker_Proto::unsafe_arena_release_intermediary() {
  // @@protoc_insertion_point(field_release:com.example.Broker_Proto.intermediary)
  
  ::com::example::Intermediary_Proto* temp = intermediary_;
  intermediary_ = nullptr;
  return temp;
}
inline ::com::example::Intermediary_Proto* Broker_Proto::_internal_mutable_intermediary() {
  
  if (intermediary_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::example::Intermediary_Proto>(GetArena());
    intermediary_ = p;
  }
  return intermediary_;
}
inline ::com::example::Intermediary_Proto* Broker_Proto::mutable_intermediary() {
  // @@protoc_insertion_point(field_mutable:com.example.Broker_Proto.intermediary)
  return _internal_mutable_intermediary();
}
inline void Broker_Proto::set_allocated_intermediary(::com::example::Intermediary_Proto* intermediary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete intermediary_;
  }
  if (intermediary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(intermediary);
    if (message_arena != submessage_arena) {
      intermediary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, intermediary, submessage_arena);
    }
    
  } else {
    
  }
  intermediary_ = intermediary;
  // @@protoc_insertion_point(field_set_allocated:com.example.Broker_Proto.intermediary)
}

// -------------------------------------------------------------------

// Bank_Proto

// .com.example.Intermediary_Proto intermediary = 1;
inline bool Bank_Proto::_internal_has_intermediary() const {
  return this != internal_default_instance() && intermediary_ != nullptr;
}
inline bool Bank_Proto::has_intermediary() const {
  return _internal_has_intermediary();
}
inline void Bank_Proto::clear_intermediary() {
  if (GetArena() == nullptr && intermediary_ != nullptr) {
    delete intermediary_;
  }
  intermediary_ = nullptr;
}
inline const ::com::example::Intermediary_Proto& Bank_Proto::_internal_intermediary() const {
  const ::com::example::Intermediary_Proto* p = intermediary_;
  return p != nullptr ? *p : *reinterpret_cast<const ::com::example::Intermediary_Proto*>(
      &::com::example::_Intermediary_Proto_default_instance_);
}
inline const ::com::example::Intermediary_Proto& Bank_Proto::intermediary() const {
  // @@protoc_insertion_point(field_get:com.example.Bank_Proto.intermediary)
  return _internal_intermediary();
}
inline void Bank_Proto::unsafe_arena_set_allocated_intermediary(
    ::com::example::Intermediary_Proto* intermediary) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(intermediary_);
  }
  intermediary_ = intermediary;
  if (intermediary) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.example.Bank_Proto.intermediary)
}
inline ::com::example::Intermediary_Proto* Bank_Proto::release_intermediary() {
  auto temp = unsafe_arena_release_intermediary();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::example::Intermediary_Proto* Bank_Proto::unsafe_arena_release_intermediary() {
  // @@protoc_insertion_point(field_release:com.example.Bank_Proto.intermediary)
  
  ::com::example::Intermediary_Proto* temp = intermediary_;
  intermediary_ = nullptr;
  return temp;
}
inline ::com::example::Intermediary_Proto* Bank_Proto::_internal_mutable_intermediary() {
  
  if (intermediary_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::example::Intermediary_Proto>(GetArena());
    intermediary_ = p;
  }
  return intermediary_;
}
inline ::com::example::Intermediary_Proto* Bank_Proto::mutable_intermediary() {
  // @@protoc_insertion_point(field_mutable:com.example.Bank_Proto.intermediary)
  return _internal_mutable_intermediary();
}
inline void Bank_Proto::set_allocated_intermediary(::com::example::Intermediary_Proto* intermediary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete intermediary_;
  }
  if (intermediary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(intermediary);
    if (message_arena != submessage_arena) {
      intermediary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, intermediary, submessage_arena);
    }
    
  } else {
    
  }
  intermediary_ = intermediary;
  // @@protoc_insertion_point(field_set_allocated:com.example.Bank_Proto.intermediary)
}

// -------------------------------------------------------------------

// MutualFundManager_Proto

// .com.example.Intermediary_Proto intermediary = 1;
inline bool MutualFundManager_Proto::_internal_has_intermediary() const {
  return this != internal_default_instance() && intermediary_ != nullptr;
}
inline bool MutualFundManager_Proto::has_intermediary() const {
  return _internal_has_intermediary();
}
inline void MutualFundManager_Proto::clear_intermediary() {
  if (GetArena() == nullptr && intermediary_ != nullptr) {
    delete intermediary_;
  }
  intermediary_ = nullptr;
}
inline const ::com::example::Intermediary_Proto& MutualFundManager_Proto::_internal_intermediary() const {
  const ::com::example::Intermediary_Proto* p = intermediary_;
  return p != nullptr ? *p : *reinterpret_cast<const ::com::example::Intermediary_Proto*>(
      &::com::example::_Intermediary_Proto_default_instance_);
}
inline const ::com::example::Intermediary_Proto& MutualFundManager_Proto::intermediary() const {
  // @@protoc_insertion_point(field_get:com.example.MutualFundManager_Proto.intermediary)
  return _internal_intermediary();
}
inline void MutualFundManager_Proto::unsafe_arena_set_allocated_intermediary(
    ::com::example::Intermediary_Proto* intermediary) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(intermediary_);
  }
  intermediary_ = intermediary;
  if (intermediary) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.example.MutualFundManager_Proto.intermediary)
}
inline ::com::example::Intermediary_Proto* MutualFundManager_Proto::release_intermediary() {
  auto temp = unsafe_arena_release_intermediary();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::example::Intermediary_Proto* MutualFundManager_Proto::unsafe_arena_release_intermediary() {
  // @@protoc_insertion_point(field_release:com.example.MutualFundManager_Proto.intermediary)
  
  ::com::example::Intermediary_Proto* temp = intermediary_;
  intermediary_ = nullptr;
  return temp;
}
inline ::com::example::Intermediary_Proto* MutualFundManager_Proto::_internal_mutable_intermediary() {
  
  if (intermediary_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::example::Intermediary_Proto>(GetArena());
    intermediary_ = p;
  }
  return intermediary_;
}
inline ::com::example::Intermediary_Proto* MutualFundManager_Proto::mutable_intermediary() {
  // @@protoc_insertion_point(field_mutable:com.example.MutualFundManager_Proto.intermediary)
  return _internal_mutable_intermediary();
}
inline void MutualFundManager_Proto::set_allocated_intermediary(::com::example::Intermediary_Proto* intermediary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete intermediary_;
  }
  if (intermediary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(intermediary);
    if (message_arena != submessage_arena) {
      intermediary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, intermediary, submessage_arena);
    }
    
  } else {
    
  }
  intermediary_ = intermediary;
  // @@protoc_insertion_point(field_set_allocated:com.example.MutualFundManager_Proto.intermediary)
}

// -------------------------------------------------------------------

// Snapshot_Proto

// string assetName = 1;
inline void Snapshot_Proto::clear_assetname() {
  assetname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Snapshot_Proto::assetname() const {
  // @@protoc_insertion_point(field_get:com.example.Snapshot_Proto.assetName)
  return _internal_assetname();
}
inline void Snapshot_Proto::set_assetname(const std::string& value) {
  _internal_set_assetname(value);
  // @@protoc_insertion_point(field_set:com.example.Snapshot_Proto.assetName)
}
inline std::string* Snapshot_Proto::mutable_assetname() {
  // @@protoc_insertion_point(field_mutable:com.example.Snapshot_Proto.assetName)
  return _internal_mutable_assetname();
}
inline const std::string& Snapshot_Proto::_internal_assetname() const {
  return assetname_.Get();
}
inline void Snapshot_Proto::_internal_set_assetname(const std::string& value) {
  
  assetname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Snapshot_Proto::set_assetname(std::string&& value) {
  
  assetname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.example.Snapshot_Proto.assetName)
}
inline void Snapshot_Proto::set_assetname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  assetname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.example.Snapshot_Proto.assetName)
}
inline void Snapshot_Proto::set_assetname(const char* value,
    size_t size) {
  
  assetname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.example.Snapshot_Proto.assetName)
}
inline std::string* Snapshot_Proto::_internal_mutable_assetname() {
  
  return assetname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Snapshot_Proto::release_assetname() {
  // @@protoc_insertion_point(field_release:com.example.Snapshot_Proto.assetName)
  return assetname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Snapshot_Proto::set_allocated_assetname(std::string* assetname) {
  if (assetname != nullptr) {
    
  } else {
    
  }
  assetname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), assetname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.example.Snapshot_Proto.assetName)
}
inline std::string* Snapshot_Proto::unsafe_arena_release_assetname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.example.Snapshot_Proto.assetName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return assetname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Snapshot_Proto::unsafe_arena_set_allocated_assetname(
    std::string* assetname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (assetname != nullptr) {
    
  } else {
    
  }
  assetname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      assetname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.example.Snapshot_Proto.assetName)
}

// float assetValue = 2;
inline void Snapshot_Proto::clear_assetvalue() {
  assetvalue_ = 0;
}
inline float Snapshot_Proto::_internal_assetvalue() const {
  return assetvalue_;
}
inline float Snapshot_Proto::assetvalue() const {
  // @@protoc_insertion_point(field_get:com.example.Snapshot_Proto.assetValue)
  return _internal_assetvalue();
}
inline void Snapshot_Proto::_internal_set_assetvalue(float value) {
  
  assetvalue_ = value;
}
inline void Snapshot_Proto::set_assetvalue(float value) {
  _internal_set_assetvalue(value);
  // @@protoc_insertion_point(field_set:com.example.Snapshot_Proto.assetValue)
}

// string timestamp = 3;
inline void Snapshot_Proto::clear_timestamp() {
  timestamp_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Snapshot_Proto::timestamp() const {
  // @@protoc_insertion_point(field_get:com.example.Snapshot_Proto.timestamp)
  return _internal_timestamp();
}
inline void Snapshot_Proto::set_timestamp(const std::string& value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:com.example.Snapshot_Proto.timestamp)
}
inline std::string* Snapshot_Proto::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:com.example.Snapshot_Proto.timestamp)
  return _internal_mutable_timestamp();
}
inline const std::string& Snapshot_Proto::_internal_timestamp() const {
  return timestamp_.Get();
}
inline void Snapshot_Proto::_internal_set_timestamp(const std::string& value) {
  
  timestamp_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Snapshot_Proto::set_timestamp(std::string&& value) {
  
  timestamp_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.example.Snapshot_Proto.timestamp)
}
inline void Snapshot_Proto::set_timestamp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  timestamp_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.example.Snapshot_Proto.timestamp)
}
inline void Snapshot_Proto::set_timestamp(const char* value,
    size_t size) {
  
  timestamp_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.example.Snapshot_Proto.timestamp)
}
inline std::string* Snapshot_Proto::_internal_mutable_timestamp() {
  
  return timestamp_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Snapshot_Proto::release_timestamp() {
  // @@protoc_insertion_point(field_release:com.example.Snapshot_Proto.timestamp)
  return timestamp_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Snapshot_Proto::set_allocated_timestamp(std::string* timestamp) {
  if (timestamp != nullptr) {
    
  } else {
    
  }
  timestamp_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timestamp,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.example.Snapshot_Proto.timestamp)
}
inline std::string* Snapshot_Proto::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.example.Snapshot_Proto.timestamp)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return timestamp_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Snapshot_Proto::unsafe_arena_set_allocated_timestamp(
    std::string* timestamp) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (timestamp != nullptr) {
    
  } else {
    
  }
  timestamp_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      timestamp, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.example.Snapshot_Proto.timestamp)
}

// -------------------------------------------------------------------

// Portfolio_Proto

// repeated .com.example.Asset_Proto assets = 1;
inline int Portfolio_Proto::_internal_assets_size() const {
  return assets_.size();
}
inline int Portfolio_Proto::assets_size() const {
  return _internal_assets_size();
}
inline void Portfolio_Proto::clear_assets() {
  assets_.Clear();
}
inline ::com::example::Asset_Proto* Portfolio_Proto::mutable_assets(int index) {
  // @@protoc_insertion_point(field_mutable:com.example.Portfolio_Proto.assets)
  return assets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::example::Asset_Proto >*
Portfolio_Proto::mutable_assets() {
  // @@protoc_insertion_point(field_mutable_list:com.example.Portfolio_Proto.assets)
  return &assets_;
}
inline const ::com::example::Asset_Proto& Portfolio_Proto::_internal_assets(int index) const {
  return assets_.Get(index);
}
inline const ::com::example::Asset_Proto& Portfolio_Proto::assets(int index) const {
  // @@protoc_insertion_point(field_get:com.example.Portfolio_Proto.assets)
  return _internal_assets(index);
}
inline ::com::example::Asset_Proto* Portfolio_Proto::_internal_add_assets() {
  return assets_.Add();
}
inline ::com::example::Asset_Proto* Portfolio_Proto::add_assets() {
  // @@protoc_insertion_point(field_add:com.example.Portfolio_Proto.assets)
  return _internal_add_assets();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::example::Asset_Proto >&
Portfolio_Proto::assets() const {
  // @@protoc_insertion_point(field_list:com.example.Portfolio_Proto.assets)
  return assets_;
}

// repeated .com.example.Intermediary_Proto intermediaries = 2;
inline int Portfolio_Proto::_internal_intermediaries_size() const {
  return intermediaries_.size();
}
inline int Portfolio_Proto::intermediaries_size() const {
  return _internal_intermediaries_size();
}
inline void Portfolio_Proto::clear_intermediaries() {
  intermediaries_.Clear();
}
inline ::com::example::Intermediary_Proto* Portfolio_Proto::mutable_intermediaries(int index) {
  // @@protoc_insertion_point(field_mutable:com.example.Portfolio_Proto.intermediaries)
  return intermediaries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::example::Intermediary_Proto >*
Portfolio_Proto::mutable_intermediaries() {
  // @@protoc_insertion_point(field_mutable_list:com.example.Portfolio_Proto.intermediaries)
  return &intermediaries_;
}
inline const ::com::example::Intermediary_Proto& Portfolio_Proto::_internal_intermediaries(int index) const {
  return intermediaries_.Get(index);
}
inline const ::com::example::Intermediary_Proto& Portfolio_Proto::intermediaries(int index) const {
  // @@protoc_insertion_point(field_get:com.example.Portfolio_Proto.intermediaries)
  return _internal_intermediaries(index);
}
inline ::com::example::Intermediary_Proto* Portfolio_Proto::_internal_add_intermediaries() {
  return intermediaries_.Add();
}
inline ::com::example::Intermediary_Proto* Portfolio_Proto::add_intermediaries() {
  // @@protoc_insertion_point(field_add:com.example.Portfolio_Proto.intermediaries)
  return _internal_add_intermediaries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::example::Intermediary_Proto >&
Portfolio_Proto::intermediaries() const {
  // @@protoc_insertion_point(field_list:com.example.Portfolio_Proto.intermediaries)
  return intermediaries_;
}

// repeated .com.example.Snapshot_Proto snapshots = 3;
inline int Portfolio_Proto::_internal_snapshots_size() const {
  return snapshots_.size();
}
inline int Portfolio_Proto::snapshots_size() const {
  return _internal_snapshots_size();
}
inline void Portfolio_Proto::clear_snapshots() {
  snapshots_.Clear();
}
inline ::com::example::Snapshot_Proto* Portfolio_Proto::mutable_snapshots(int index) {
  // @@protoc_insertion_point(field_mutable:com.example.Portfolio_Proto.snapshots)
  return snapshots_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::example::Snapshot_Proto >*
Portfolio_Proto::mutable_snapshots() {
  // @@protoc_insertion_point(field_mutable_list:com.example.Portfolio_Proto.snapshots)
  return &snapshots_;
}
inline const ::com::example::Snapshot_Proto& Portfolio_Proto::_internal_snapshots(int index) const {
  return snapshots_.Get(index);
}
inline const ::com::example::Snapshot_Proto& Portfolio_Proto::snapshots(int index) const {
  // @@protoc_insertion_point(field_get:com.example.Portfolio_Proto.snapshots)
  return _internal_snapshots(index);
}
inline ::com::example::Snapshot_Proto* Portfolio_Proto::_internal_add_snapshots() {
  return snapshots_.Add();
}
inline ::com::example::Snapshot_Proto* Portfolio_Proto::add_snapshots() {
  // @@protoc_insertion_point(field_add:com.example.Portfolio_Proto.snapshots)
  return _internal_add_snapshots();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::example::Snapshot_Proto >&
Portfolio_Proto::snapshots() const {
  // @@protoc_insertion_point(field_list:com.example.Portfolio_Proto.snapshots)
  return snapshots_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace example
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_demo_2fsrc_2fmain_2fproto_2ffinancial_5fportfolio_2eproto
